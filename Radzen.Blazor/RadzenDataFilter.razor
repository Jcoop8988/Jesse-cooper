@using System.Linq.Expressions
@typeparam TItem
@inherits RadzenComponent

@if (Properties != null)
{
    <CascadingValue Value=this>
        @Properties
    </CascadingValue>
}

@if (Visible)
{
    <div @ref="@Element" style="@Style" @attributes="Attributes" class="@GetCssClass()" id="@GetId()">
        <RadzenSelectBar @bind-Value=LogicalFilterOperator Change="@((LogicalFilterOperator args) => { InvokeAsync(ChangeState); if(Auto) { InvokeAsync(Filter); } })">
            <Items>
                <RadzenSelectBarItem Text="@AndOperatorText" Value="LogicalFilterOperator.And" title="@AndOperatorText" />
                <RadzenSelectBarItem Text="@OrOperatorText" Value="LogicalFilterOperator.Or" title="@OrOperatorText" />
            </Items>
        </RadzenSelectBar>
        <RadzenButton title="@ClearFilterText" class="rz-datafilter-item-clear" Icon="clear" Click="@(args => ClearFilters())" Visible=@(Filters.Any()) ButtonStyle="ButtonStyle.Light" />

        <ul class="rz-datafilter-group">
            @foreach(var filter in Filters)
            {
              <li class="rz-datafilter-item">
                <RadzenDataFilterItem DataFilter="@this" Filter="@filter" />
              </li>
            }
            <li class="rz-datafilter-item rz-datafilter-bar">
                <RadzenSplitButton Icon="add" Click="@(args => AddFilter(args?.Value == "group"))">
                    <RadzenSplitButtonItem Icon="add" Text="@AddFilterText" />
                    <RadzenSplitButtonItem Icon="playlist_add" Value="group" Text="@AddFilterGroupText" />
                </RadzenSplitButton>
            </li>
        </ul>
    </div>
}
