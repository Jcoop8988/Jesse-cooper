@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime

<div @ref="@chartTooltipElement" class="rz-chart-tooltip rz-chart-tooltip-top-center @Class" style="left: @(X.ToInvariantString())px; top: @(Y.ToInvariantString())px">
    <div class="rz-chart-tooltip-content" style="@Style">
    @if (ChildContent != null)
    {
        @ChildContent
    }
    else
    {
        <div>@Title</div>
        <label>@($"{Label}:")
            <strong>@Value</strong>
        </label>
    }
    </div>
</div>

@code {
    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public double X { get; set; }

    [Parameter]
    public double Y { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public string Class { get; set; }

    [CascadingParameter]
    public RadzenChart Chart { get; set; }

    ElementReference? chartTooltipElement;

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (chartTooltipElement != null)
        {
            await JSRuntime.InvokeAsync<string>("Radzen.setChartTooltipCssClass", chartTooltipElement, Chart.Element, X, Y);
        }
    }
}