@using Radzen.Blazor.Rendering
@typeparam TItem
@inherits RadzenChartComponentBase
@implements IRadzenSeriesOverlay

@code {
    [Parameter]
    public TItem Data { get; set; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public double OffsetX { get; set; }

    [Parameter]
    public double OffsetY { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public bool Visible { get; set; } = true;

    CartesianSeries<TItem> series;
    [CascadingParameter]
    protected CartesianSeries<TItem> Series 
    { 
        get
        {
            return series;
        }
        set
        {
            if (!value.Overlays.Contains(this))
            {
                series = value;
                series.Overlays.Add(this);
            }
        }
    }

    public RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale)
    {
        double x = series.TooltipX(Data);
        double y = series.TooltipY(Data);

        x += OffsetX;
        y += OffsetY;

        Point pt = new Point() { X = x, Y = y };
        return 
        @<g>
            <Text @key="@($"{pt}-{Text}-{Chart.Series.IndexOf(series)}")"  Value="@Text" Position="pt" Class="@Class" />
        </g>
    ;
    }

    public bool Contains(double mouseX, double mouseY, int tolerance)
    {
        return false;
    }

    public RenderFragment RenderTooltip(double mouseX, double mouseY, double marginLeft, double marginTop)
    {
        return null;
    }
}