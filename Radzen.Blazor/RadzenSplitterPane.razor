@inherits RadzenComponent


@if (Visible)
{
    <div id="@GetId()" class="@GetComponentCssClass()" style="flex-basis: @Size;" data-index="@Index">
        @ChildContent
    </div>


    @if (!IsLast)
    {
        <div class="@GetComponentBarCssClass()"
             @onclick:preventDefault="true"
             @onclick:stopPropagation="true"
             @onmousedown=@(args => Splitter.Resize_Exec(args, Index))>

            @if (IsCollapsible)
            {
                <span class="compress" @onmousedown:preventDefault="true" @onmousedown:stopPropagation="true" @onmousedown=@(args => Splitter.Collapse_Exec(args, Index, UniqueID))>
                </span>
            }

            @if (IsResizable)
            {
                <span class="resizing">
                </span>
            }

            @if (IsExpandable)
            {
                <span class="expand" @onmousedown:preventDefault="true" @onmousedown:stopPropagation="true" @onmousedown=@(args => Splitter.Expand_Exec(args, Index, UniqueID))>
                </span>
            }


        </div>
    }
}

@code {
    RadzenSplitter _splitter;
    private string _size;

    internal string SizeRuntine { get; set; }

    internal bool SizeAuto { get; set; }

    internal int Index { get; set; }

    internal bool IsLastResizable
    {
        get { return Splitter.Panes.Last(o => o.Resizable && !o.Collapsed) == this; }
    }

    internal bool IsLast => Splitter.Panes.Count - 1 == Index;

    internal RadzenSplitterPane Next()
    {
        return Index <= Splitter.Panes.Count - 2
            ? Splitter.Panes[Index + 1]
            : null;
    }

    internal bool IsResizable
    {
        get
        {
            var nextpane = Next();

            if (Collapsed
                || (Index == Splitter.Panes.Count - 2 && !nextpane.IsResizable)
                || (IsLastResizable && nextpane != null && nextpane.Collapsed)
                )
                return false;


            return Resizable;
        }
    }

    internal bool IsCollapsible
    {
        get
        {
            if (Collapsible && !Collapsed)
                return true;

            var panenext = Next();
            if (panenext == null)
                return false;

            return panenext.IsLast && panenext.Collapsible && panenext.Collapsed;
        }
    }

    internal bool IsExpandable
    {
        get
        {
            if (Collapsed)
                return true;

            var panenext = Next();
            if (panenext == null)
                return false;

            return panenext.IsLast && panenext.Collapsible && !panenext.Collapsed;
        }
    }

    internal string ClassName
    {
        get
        {
            if (Collapsed)
                return "collapsed";

            if (IsLastResizable)
                return "lastresizable";

            if (IsResizable)
                return "resizable";

            return "locked";
        }
    }


    [Parameter]
    public RenderFragment ChildContent { get; set; }


    [Parameter]
    public bool Collapsible { get; set; } = true;

    [Parameter]
    public bool Collapsed { get; set; }

    [Parameter]
    public bool Resizable { get; set; } = true;

    [Parameter]
    public string Max { get; set; }

    [Parameter]
    public string Min { get; set; }

    [Parameter]
    public string Size
    {
        get => SizeRuntine ?? _size;
        set => _size = value;
    }

    [CascadingParameter]
    public RadzenSplitter Splitter
    {
        get => _splitter;
        set
        {
            if (_splitter != value)
            {
                _splitter = value;
                _splitter.AddPane(this);
            }
        }
    }
    

    public override void Dispose()
    {
        base.Dispose();
        Splitter?.RemovePane(this);
    }

    protected override string GetComponentCssClass()
    {
        return $"rz-splitter-pane rz-splitter-pane-{ClassName}";
    }

    protected string GetComponentBarCssClass()
    {
        return $"rz-splitter-bar rz-splitter-bar-{ClassName}";
    }



}