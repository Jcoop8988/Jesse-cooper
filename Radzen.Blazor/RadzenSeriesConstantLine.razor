@using Radzen.Blazor.Rendering
@inherits RadzenGridLines
@implements IRadzenSeriesOverlay

@code {
    public RadzenSeriesConstantLine()
    {
        Visible = true;
    }

    [Parameter]
    public virtual double Value { get; set; }

    IChartSeries series;
    [CascadingParameter]
    protected IChartSeries Series 
    { 
        get
        {
            return series;
        }
        set
        {
            if (value.CoordinateSystem != CoordinateSystem.Cartesian)
            {
                throw new ArgumentException($"Series must use Cartesian coordinate system");
            }
            series = value;
            series.Overlays.Add(this);
        }
    }

    public RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale)
    {
        double x1, x2, y1, y2;
        if (Chart.ShouldInvertAxes())
        {
            x1 = x2 = categoryScale.Scale(Value);
            y1 = 0; y2 = Chart.ValueScale.OutputSize;
        }
        else
        {
            y1 = y2 = valueScale.Scale(Value);
            x1 = 0; x2 = Chart.CategoryScale.OutputSize - Chart.CategoryAxis.Padding * 2;           
        }
       
        var path = $"M{x1} {y1} L{x2} {y2}";
        return
        @<g>
            <Path @key="@($"{path}-{Chart.Series.IndexOf(series)}")" D="@path" Stroke="@Stroke" StrokeWidth="@StrokeWidth" LineType="@LineType" />
        </g>;
    }
}