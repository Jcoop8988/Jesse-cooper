@implements IDisposable
@using Microsoft.JSInterop
@using Radzen.Blazor.Rendering
@inject IJSRuntime JSRuntime

@foreach (var dialog in dialogs)
{
    <DialogContainer Dialog=@dialog ShowMask=@(dialog==dialogs.LastOrDefault()) />
}

@code {
    [Inject] 
    DialogService Service { get; set; }

    List<Dialog> dialogs = new List<Dialog>();

    public async Task Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        if(options.HasParent)
        {
            var parent = dialogs.LastOrDefault();

            if (parent is null)
            {
                throw new ArgumentNullException("No available dialog to bind child.");
            }

            parent.IsParent = true;
        }

        dialogs.Add(new Dialog() { Title = title, Type = type, Parameters = parameters, Options = options });

        await InvokeAsync(() => { StateHasChanged(); });
    }

    public async Task Close(dynamic result)
    {
        var lastDialog = dialogs.LastOrDefault();
        var hasParent = lastDialog.Options.HasParent;
        if (lastDialog != null)
        {
            dialogs.Remove(lastDialog);
            if (dialogs.Count==0)
            { 
                await JSRuntime.InvokeAsync<string>("Radzen.closeDialog");
            }
            else
            {
                if(hasParent)
                {
                    var parent = dialogs.LastOrDefault();
                    if (parent != null)
                    {
                        parent.IsParent = false;
                    }
                }
            }
        }

        await InvokeAsync(() => 
        { 
            StateHasChanged(); 
        });
    }

    public void Dispose()
    {
        Service.OnOpen -= OnOpen;
        Service.OnClose -= OnClose;
    }

    protected override void OnInitialized()
    {
        Service.OnOpen += OnOpen;
        Service.OnClose += OnClose;
    }

    void OnOpen(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Open(title, type, parameters, options).ConfigureAwait(false);
    }

    void OnClose(dynamic result)
    {
        Close(result).ConfigureAwait(false);
    }
}