@page "/datagrid-dynamic"

<RadzenExample Name="DataGridDynamicData">
    <h3>Binding to IEnumerable of IDictionary</h3>
    <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                AllowPaging="true" PageSize="5" AllowSorting="true" Data="@data" TItem="IDictionary<string, dynamic>"
                Count="@count" LoadData="@LoadData">
        <Columns>
            <RadzenGridColumn TItem="IDictionary<string, dynamic>" Property="EmployeeID" Title="EmployeeID" Type="integer">
                <Template>
                    @context["EmployeeID"]
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="IDictionary<string, dynamic>" Property="FirstName" Title="FirstName" Type="string">
                <Template>
                    @context["FirstName"]
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="IDictionary<string, dynamic>" Property="LastName" Title="LastName" Type="string">
                <Template>
                    @context["LastName"]
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
</RadzenExample>
@code {
    IEnumerable<IDictionary<string, dynamic>> data;
    int count;

    async Task LoadData(LoadDataArgs args)
    {
        var uri = new Uri("https://services.radzen.com/odata/Northwind/Employees")
            .GetODataUri(filter: args.Filter, top: args.Top, skip: args.Skip, orderby: args.OrderBy, count: true);

        var response = await new HttpClient().SendAsync(new HttpRequestMessage(HttpMethod.Get, uri));

        var result = await response.ReadAsync<ODataServiceResult<IDictionary<string, dynamic>>>();

        data = result.Value.AsODataEnumerable();
        count = result.Count;

        StateHasChanged();
    }
}