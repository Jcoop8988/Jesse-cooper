@page "/dialog"
@using System.Timers
@inject DialogService DialogService

<RadzenExample Name="Dialog" Documentation="true" AdditionalSourceCodePages=@(new List<string>() { "DialogCardPage.razor" })>
    <div class="row">
        <div class="col-xl-6">
            <h3>Dialog</h3>
            <RadzenButton Text=@($"Show OrderID: {orderID} details") Click=@(args => DialogService.Open<DialogCardPage>($"Order {orderID}",
                        new Dictionary<string, object>() { { "OrderID", orderID } },
                        new DialogOptions(){ Width = "700px", Height = "530px" })) />

            <h3 style="margin-top: 20px;">Simple Dialog</h3>
            <RadzenButton Text="Show dialog with inline Blazor content" Click=@ShowInlineDialog />
            <h3 style="margin-top: 20px;">Busy Dialog</h3>
            <RadzenButton Text="Show busy dialog" Click=@ShowBusyDialog />
            <h3 style="margin-top: 20px;">Confirm Dialog</h3>
            <RadzenButton Text="Show confirm dialog" Click=@(args => DialogService.Confirm("Are you sure?", "MyTitle", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" })) />
        </div>
        <div class="col-xl-6">
            <EventConsole @ref=@console />
        </div>
    </div>
</RadzenExample>

@code {
    EventConsole console;
    int orderID = 10248;

    protected override void OnInitialized()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        console.Log("Dialog opened");
    }

    void Close(dynamic result)
    {
        console.Log($"Dialog closed with result: {result}");
    }

    async Task ShowInlineDialog() => await DialogService.OpenAsync("Simple Dialog", ds =>
        @<div>
            <p Style="margin-bottom: 1rem">Confirm?</p>
            <div class="row">
                <div class="col-md-12">
                    <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary"  Style="margin-bottom: 10px; width: 150px"/>
                    <RadzenButton Text="Refresh" Click="(() => { orderID = 10249; ds.Refresh(); })" ButtonStyle="ButtonStyle.Info"  Style="margin-bottom: 10px; width: 150px"/>
                    Order ID: @orderID
                </div>
            </div>
    </div>);

    async Task ShowBusyDialog()
    {
        var timer = new Timer(2000);
        timer.Elapsed += (sender, e) => 
        { 
            DialogService.Close(); 
            timer.Stop(); 
        };
        timer.Start();

        await BusyDialog("Busy...");
    }

    // Busy dialog from string
    async Task BusyDialog(string message) => await DialogService.OpenAsync("", ds =>
    {
        RenderFragment content = b =>
        {
            var i = 0;

            b.OpenElement(i++, "div");
            b.AddAttribute(i++, "class", "row");

            b.OpenElement(i++, "div");
            b.AddAttribute(i++, "class", "col-md-12");

            b.AddContent(i++, message);

            b.CloseElement();
            b.CloseElement();
        };
        return content;
    }, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto" });
}